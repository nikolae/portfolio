<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xslt/atom.xslt" ?>
<?xml-stylesheet type="text/css" href="/assets/css/atom.css" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://nickaroneseno.com/</id>
	<title>Nick Aroneseno: A technical journey</title>
	<updated>2023-07-12T17:26:23-06:00</updated>

	<subtitle>A personal &lt;em&gt;how did I do this that one time&lt;/em&gt; archive, portfolio, and personal web presence.</subtitle>

	
		
		<author>
			
				<name>Nick</name>
			
			
			
				<uri>https://nickaroneseno.com/</uri>
			
		</author>
	

	<link href="https://nickaroneseno.com/atom.xml" rel="self" type="application/rss+xml" />
	<link href="https://nickaroneseno.com/" rel="alternate" type="text/html" />

	<generator uri="http://jekyllrb.com" version="3.9.3">Jekyll</generator>

	
		<entry>
			<id>https://nickaroneseno.com/software/web/Jekyll-on-Mac/</id>
			<title>Jekyll on Mac</title>
			<link href="https://nickaroneseno.com/software/web/Jekyll-on-Mac/" rel="alternate" type="text/html" title="Jekyll on Mac" />
			<updated>2023-07-12T07:00:00-06:00</updated>

			
				
				<author>
					
						<name>Nick</name>
					
					
					
						<uri>https://nickaroneseno.com/</uri>
					
				</author>
			
			<summary>The definition of insanity is doing it again and again.</summary>
			<content type="html" xml:base="https://nickaroneseno.com/software/web/Jekyll-on-Mac/">&lt;h2 id=&quot;do-it-again&quot;&gt;Do it again&lt;/h2&gt;

&lt;p&gt;I recently posted a &lt;a href=&quot;https://nickaroneseno.com/software/web/how-I-built-it/&quot;&gt;guide&lt;/a&gt; on how to use Jekyll as a static site generator on Windows. Time to do it again! This guide is for Mac.&lt;/p&gt;

&lt;div class=&quot;panel radius&quot;&gt;
  &lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#do-it-again&quot; id=&quot;markdown-toc-do-it-again&quot;&gt;Do it again&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#requirements&quot; id=&quot;markdown-toc-requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#brew&quot; id=&quot;markdown-toc-brew&quot;&gt;Brew&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ruby&quot; id=&quot;markdown-toc-ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll&quot; id=&quot;markdown-toc-jekyll&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot; id=&quot;markdown-toc-references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Github account (optional, but recommended)&lt;/li&gt;
  &lt;li&gt;Computing device&lt;/li&gt;
  &lt;li&gt;Base understanding of Git (here’s a [refresher][conversational-git])&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;brew&quot;&gt;Brew&lt;/h2&gt;
&lt;p&gt;While Mac comes with Ruby, it’s usually a bit outdated from the latest. For instance, a June 2023 Mac ships with Ruby from April 2022. We don’t necessarily want to remove that version. For this reason, we will be installing &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt; - a package manager. As of July 2023, paste this into Terminal: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;&lt;/code&gt;, or go to the &lt;a href=&quot;https://brew.sh&quot;&gt;website&lt;/a&gt; and look for the latest command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/guides/mac01.jpg&quot; alt=&quot;mac01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once it’s installed, you might want to consider adding it to your PATH variable to easily call it. As two separate commands, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(echo; echo &apos;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&apos;) &amp;gt;&amp;gt; /Users/USER/.zprofile&lt;/code&gt; (where USER is your Unix short name) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ruby&quot;&gt;Ruby&lt;/h2&gt;
&lt;p&gt;Now that we have a nice package manager installed, let’s grab the Ruby version we need: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install chruby ruby-install xz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/guides/mac02.jpg&quot; alt=&quot;mac02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby-install ruby 3.1.3&lt;/code&gt; (this will take a bit).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/guides/mac03.jpg&quot; alt=&quot;mac03&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Configure Terminal to call chruby by default:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo &quot;source $(brew --prefix)/opt/chruby/share/chruby/chruby.sh&quot; &amp;gt;&amp;gt; ~/.zshrc&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo &quot;source $(brew --prefix)/opt/chruby/share/chruby/auto.sh&quot; &amp;gt;&amp;gt; ~/.zshrc&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo &quot;chruby ruby-3.1.3&quot; &amp;gt;&amp;gt; ~/.zshrc # run &apos;chruby&apos; to see actual version&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quit Terminal and re-open it. Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chruby&lt;/code&gt; to make sure the above PATH updates worked and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt; to check the right version of Ruby is now being used.&lt;/p&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h2&gt;
&lt;p&gt;This is pretty straightforward. Type and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/guides/mac04.jpg&quot; alt=&quot;mac04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You are now at the point of cloning your existing website (if you have one) or making a new one. If you have an existing one, clone (see &lt;a href=&quot;https://nickaroneseno.com/software/web/how-I-built-it/#git&quot;&gt;previous guide&lt;/a&gt;) and navigate to your site’s directory. Don’t forget to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;, or you will get some bad news:
&lt;img src=&quot;/assets/images/guides/mac05.jpg&quot; alt=&quot;mac05&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To create a new site, navigate to the directory you want and type: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new --skip-bundle . --force&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once you have a site generated or cloned, preview the website with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; or generate the HTML files with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/guides/mac06.png&quot; alt=&quot;mac06&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/installation/macos/&quot;&gt;https://jekyllrb.com/docs/installation/macos/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.moncefbelyamani.com/which-shell-am-i-using-how-can-i-switch/&quot;&gt;https://www.moncefbelyamani.com/which-shell-am-i-using-how-can-i-switch/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac/&quot;&gt;https://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nickaroneseno.com/software/web/how-I-built-it/&quot;&gt;https://nickaroneseno.com/software/web/how-I-built-it/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>

			
				<category term="software" />
			
				<category term="web" />
			
			
				<category term="web" />
			
				<category term="software" />
			
				<category term="jekyll" />
			
				<category term="guides" />
			
				<category term="mac" />
			

			<published>2023-07-12T07:00:00-06:00</published>
		</entry>
	
		<entry>
			<id>https://nickaroneseno.com/network/vlan/UniFi-VLAN-&-IoT-AirPlay/</id>
			<title>UniFi VLANs and AirPlay</title>
			<link href="https://nickaroneseno.com/network/vlan/UniFi-VLAN-&-IoT-AirPlay/" rel="alternate" type="text/html" title="UniFi VLANs and AirPlay" />
			<updated>2023-07-07T06:00:01-06:00</updated>

			
				
				<author>
					
						<name>Nick</name>
					
					
					
						<uri>https://nickaroneseno.com/</uri>
					
				</author>
			
			<summary>UniFi likes to do things differently. Here&apos;s how to use properly segmented networks, VLANs and AirPlay together.</summary>
			<content type="html" xml:base="https://nickaroneseno.com/network/vlan/UniFi-VLAN-&-IoT-AirPlay/">&lt;h2 id=&quot;objective&quot;&gt;Objective&lt;/h2&gt;

&lt;p&gt;Create an internal network (LAN) that is separate from IoT devices, but still have limited communication back and forth such that media protocols such as multicast and AirPlay work. In this configuration, IoT devices are allowed to talk to each other freely and to access the internet, but only selectively to LAN (AirPlay being the main example in this demo). To verify after setup, you can connect a PC to the IoT network and try accessing devices on LAN (use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping&lt;/code&gt; or trying to access a shared volume). As bonus points, to make a further restricted setup, we will change IoT to a Guest Network; this prevents IoT devices from talking to each other at all. As IoT devices typically need to peer connections, this is not recommended without site-specific research.&lt;/p&gt;

&lt;div class=&quot;panel radius&quot;&gt;
  &lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#objective&quot; id=&quot;markdown-toc-objective&quot;&gt;Objective&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#test-setup&quot; id=&quot;markdown-toc-test-setup&quot;&gt;Test setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#create-networks&quot; id=&quot;markdown-toc-create-networks&quot;&gt;Create Networks&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#lan&quot; id=&quot;markdown-toc-lan&quot;&gt;LAN&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#iot&quot; id=&quot;markdown-toc-iot&quot;&gt;IoT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#enable-multicast-support&quot; id=&quot;markdown-toc-enable-multicast-support&quot;&gt;Enable Multicast support&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#in-the-wifi-network-for-lan-verify-these-settings&quot; id=&quot;markdown-toc-in-the-wifi-network-for-lan-verify-these-settings&quot;&gt;In the WiFi network for LAN, verify these settings:&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#firewall&quot; id=&quot;markdown-toc-firewall&quot;&gt;Firewall&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#create-firewall-groups&quot; id=&quot;markdown-toc-create-firewall-groups&quot;&gt;Create Firewall Groups&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#now-that-the-two-groups-are-made-start-making-these-rules&quot; id=&quot;markdown-toc-now-that-the-two-groups-are-made-start-making-these-rules&quot;&gt;Now that the two groups are made, start making these rules:&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#remainder-of-rules&quot; id=&quot;markdown-toc-remainder-of-rules&quot;&gt;Remainder of rules&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ssh&quot; id=&quot;markdown-toc-ssh&quot;&gt;SSH&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#testing&quot; id=&quot;markdown-toc-testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot; id=&quot;markdown-toc-references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h2 id=&quot;test-setup&quot;&gt;Test setup&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;PC with iTunes (on LAN)&lt;/li&gt;
  &lt;li&gt;Phone with Apple Music (on LAN WiFi)&lt;/li&gt;
  &lt;li&gt;UniFi controller running the network application&lt;/li&gt;
  &lt;li&gt;Managed switch&lt;/li&gt;
  &lt;li&gt;A media enabled music player (I’m using a Yamaha RX-A1060 receiver) (on wired IoT).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-networks&quot;&gt;Create Networks&lt;/h2&gt;
&lt;p&gt;Create the main and IoT networks.
&lt;img src=&quot;/assets/images/guides/vlan1.jpg&quot; alt=&quot;VLAN1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;lan&quot;&gt;LAN&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/guides/vlan2.jpg&quot; alt=&quot;VLAN2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;iot&quot;&gt;IoT&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/guides/vlan3.jpg&quot; alt=&quot;VLAN3&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Note: See the VLAN ID - make sure this is the same for this network throughout the process. IGMP Snooping seems to have no effect. I tested both, but then left it enabled.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;enable-multicast-support&quot;&gt;Enable Multicast support&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/guides/vlan4.jpg&quot; alt=&quot;VLAN4&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;in-the-wifi-network-for-lan-verify-these-settings&quot;&gt;In the WiFi network for LAN, verify these settings:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/guides/vlan5.jpg&quot; alt=&quot;VLAN5&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;firewall&quot;&gt;Firewall&lt;/h2&gt;

&lt;h3 id=&quot;create-firewall-groups&quot;&gt;Create Firewall Groups&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/guides/vlan6.jpg&quot; alt=&quot;VLAN6&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Note: the ports are highly specific to your environment. Not every port was objectively tested. Recommend investigation with Wireshark and is left as an exercise to the reader. For reference: &lt;a href=&quot;https://community.ui.com/questions/Is-there-a-recommended-way-to-get-Apple-AirPlay-to-work-across-VLANs/80ccb2e8-ce73-4a37-9cc7-1530d4cdc870&quot;&gt;UI.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/guides/vlan7.jpg&quot; alt=&quot;VLAN7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/guides/vlan8.jpg&quot; alt=&quot;VLAN8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The previous two groups allow for quick changing of settings. The port group will be setup to allow IoT devices to broadcast back new sessions to the controlling devices on LAN. This configuration is not intuitive, as one typically thinks allowing ports open from LAN to IoT. However, the protocol works in such a way that mDNS allows you to initially see the IoT devices from LAN (and their IPs) and try to establish an initial connection. After that initial connection, the ports from IoT to LAN as new sessions are then required to complete the circuit, as it were.&lt;/p&gt;

&lt;p&gt;The second group of IP address ranges are to be customized for your specific network. These will be used as an end rule to block anything that doesn’t match the allow rules. It should be composed of any networks in your setup you would like to secure from IoT (typically all).&lt;/p&gt;

&lt;h3 id=&quot;now-that-the-two-groups-are-made-start-making-these-rules&quot;&gt;Now that the two groups are made, start making these rules:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/guides/vlan9.jpg&quot; alt=&quot;VLAN9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LAN In, in Ubiquiti’s parlance, is the first instance in which packets enter your LAN. Backwards from industry, as best I can tell, but so be it.&lt;/p&gt;

&lt;h3 id=&quot;remainder-of-rules&quot;&gt;Remainder of rules&lt;/h3&gt;
&lt;p&gt;This says that LAN can access anything and is used as a launching off point.
&lt;img src=&quot;/assets/images/guides/vlan10.jpg&quot; alt=&quot;VLAN10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Allow LAN to IoT. This is essentially duplicate, but in case you lock down LAN as a whole, this will keep the setup working.
&lt;img src=&quot;/assets/images/guides/vlan11.jpg&quot; alt=&quot;VLAN11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Allow IoT to LAN established/related. This says that after a device in LAN initially asks an IoT device for a connection, we will allow that initial talk-back from IoT to LAN, but only if the originating source was a device from LAN. Note that new is not checked. Also note the groups used for ease of setup and configuration later.
&lt;img src=&quot;/assets/images/guides/vlan12.jpg&quot; alt=&quot;VLAN12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Allow IoT port groups. This is similar to the previous rule but different in a critical way: we are specifically allowing new connections to go from IoT to LAN, but only on specific ports, and only on specific protocols (no SSH, for instance). Update: Changing to UDP only seems to also work for my specific configuration and would be more preferable - the less protocols allowed the better. You will have to experiment on your own network as you add new IoT devices and modify as appropriate.
&lt;img src=&quot;/assets/images/guides/vlan13.jpg&quot; alt=&quot;VLAN13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, block anything else that doesn’t explicitly match the above criteria. 
&lt;img src=&quot;/assets/images/guides/vlan14.jpg&quot; alt=&quot;VLAN14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apply the above settings, noting the order of the rules.&lt;/p&gt;

&lt;h3 id=&quot;ssh&quot;&gt;SSH&lt;/h3&gt;
&lt;p&gt;Settings are found under Site. Once the USG is done provisioning, ssh into it and clear connections.
&lt;a href=&quot;https://help.ui.com/hc/en-us/articles/115010254227-UniFi-USG-Firewall-How-to-Disable-InterVLAN-Routing&quot;&gt;UI.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear connection-tracking&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/guides/vlan15.jpg&quot; alt=&quot;VLAN15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/guides/vlan16.jpg&quot; alt=&quot;VLAN16&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;

&lt;p&gt;Now that the devices are setup and provisioned (you waited, right?), time to test. In my network, the receiver came online on the IoT network as expected, and I will test using my PC.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/guides/vlan17.jpg&quot; alt=&quot;VLAN17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/guides/vlan18.jpg&quot; alt=&quot;VLAN18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this setup to test back access, I can assign the PC into the IoT network and play to the Yamaha. I also cannot access other devices, controller or ping other LAN-based devices. Moving back to the LAN network, I can still cast to the receiver as shown above. My phone on LAN WiFi also has no trouble.&lt;/p&gt;

&lt;p&gt;That should be it. Close/reopen apps / reconnect to wifi, etc. This setup has been repeatable and testable for myself and some guinea pigs I verified this with. Reminder that all of the allowed ports are not explicitly tested and are more of a catch-all based on the AirPlay protocol.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/Ubiquiti/comments/p483ua/airplay_and_vlans/&quot;&gt;https://www.reddit.com/r/Ubiquiti/comments/p483ua/airplay_and_vlans/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.ui.com/hc/en-us/articles/115010254227-UniFi-USG-Firewall-How-to-Disable-InterVLAN-Routing&quot;&gt;https://help.ui.com/hc/en-us/articles/115010254227-UniFi-USG-Firewall-How-to-Disable-InterVLAN-Routing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.ui.com/questions/Is-there-a-recommended-way-to-get-Apple-AirPlay-to-work-across-VLANs/80ccb2e8-ce73-4a37-9cc7-1530d4cdc870&quot;&gt;https://community.ui.com/questions/Is-there-a-recommended-way-to-get-Apple-AirPlay-to-work-across-VLANs/80ccb2e8-ce73-4a37-9cc7-1530d4cdc870&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.ui.com/questions/Airplay-across-VLAN-How-to-do/0362cb7f-f38c-43ba-b10e-c2e5cc9dbe16?page=1&quot;&gt;https://community.ui.com/questions/Airplay-across-VLAN-How-to-do/0362cb7f-f38c-43ba-b10e-c2e5cc9dbe16?page=1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.ui.com/questions/Solved-AirPlay-across-walled-off-VLANs/7435c86b-e857-4ebf-bdca-bfd8d67b6647&quot;&gt;https://community.ui.com/questions/Solved-AirPlay-across-walled-off-VLANs/7435c86b-e857-4ebf-bdca-bfd8d67b6647&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>

			
				<category term="network" />
			
				<category term="vlan" />
			
			
				<category term="networking" />
			
				<category term="UniFi" />
			
				<category term="VLAN" />
			
				<category term="AirPlay" />
			
				<category term="firewall" />
			
				<category term="guides" />
			

			<published>2023-07-07T06:00:01-06:00</published>
		</entry>
	
		<entry>
			<id>https://nickaroneseno.com/electrical/power/high-speed-electrical-analysis/</id>
			<title>Creating High-Speed Electrical Analysis for Energy Research</title>
			<link href="https://nickaroneseno.com/electrical/power/high-speed-electrical-analysis/" rel="alternate" type="text/html" title="Creating High-Speed Electrical Analysis for Energy Research" />
			<updated>2023-07-01T23:55:01-06:00</updated>

			
				
				<author>
					
						<name>Nick</name>
					
					
					
						<uri>https://nickaroneseno.com/</uri>
					
				</author>
			
			<summary>An archive of a paper I wrote based on a project I did for NREL between 2010 and 2014 for high speed, real time power analysis</summary>
			<content type="html" xml:base="https://nickaroneseno.com/electrical/power/high-speed-electrical-analysis/">&lt;p&gt;&lt;em&gt;The text that follows is a slightly reworded (taking out the marketing perspective and verbiage) version of a paper I initially wrote back in 2014 for the company I was working for at the time. This paper was originally published in &lt;a href=&quot;https://www.digitalengineering247.com/&quot;&gt;Digital Engineering 24/7&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;During 2010, the contract engineering company I was working for at the time was invited to propose a solution to the National Renewable Energy Laboratory (NREL) for distributed power monitoring within the newly designed Energy Systems Integration Facility (ESIF).&lt;/p&gt;

&lt;p&gt;NREL scientists and engineers research renewable energy and energy-efficient technologies, often partnering with private industry to deliver these ideas to the general public. NREL designed the ESIF to facilitate groundbreaking research in areas such as solar and wind, power grid planning and operations, energy storage, building technologies, fuel cells, and advanced vehicles. Each lab at the 182,500 square foot facility is designed and instrumented to foster research on all aspects of energy systems integration. Some of the unique capabilities of these labs include the ability to perform hardware-in-the-loop (HIL) simulations at megawatt-scale power, petascale computing at the High-Performance Computing Data Center, and the unique Research Electrical Distribution Bus (REDB). Monitored with CompactRIO (an embedded real time data acquisition platform and controller), REDB is the ultimate power integration circuit. It consists of two AC and two DC ring buses that interconnect multiple sources of energy across the facility, enabling NREL to work with industry to provide plug-and-play testing at real-world grid-scale levels.&lt;/p&gt;

&lt;p&gt;Since the ESIF is intended for researching various forms of energy integration, NREL researchers needed a system for monitoring power usage and controlling safety systems for each experiment or laboratory on a facility-wide scale. Monitoring AC and DC power loads can provide researchers with power usage information for their individual experiments and allow facility managers to view the total energy usage on a facility-wide or laboratory-by-laboratory basis. An additional benefit is the safety monitoring for laboratories in the event of dangerous electrical conditions caused by experiments, ultimately protecting the researchers and facility equipment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/NREL_REDB.jpg&quot; alt=&quot;REDB&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The REDB is the electrical backbone interconnecting many of the laboratories at ESIF. This state-of-the-art facility will enable NREL and industry to work together to develop and evaluate their individual technologies.
&lt;em&gt;Image: &lt;a href=&quot;https://nrel.gov&quot;&gt;NREL&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Researchers needed a power monitor they could configure on an individual experiment basis for multiphase AC and DC measurements. They also needed a power meter they could use to configure the meter to mimic multiple types of circuit breakers while analyzing power characteristics such as real power, reactive power and energy. To enable live analysis of complex energy experiments, researchers required high-speed and high-resolution data (16-bit, 50/100KS/s+). Furthermore, the power monitor needed to communicate to various third-party human machine interfaces (HMIs) and programmable logic controller (PLC) devices from Wonderware and Siemens. A power monitor capable of providing all of these features did not exist in the market. As a result, my company was hired as a subcontractor to NREL to develop such a device for the ESIF.&lt;/p&gt;

&lt;h3 id=&quot;solution-details&quot;&gt;Solution Details&lt;/h3&gt;

&lt;p&gt;I provided software images for more than 70 (72 I believe) CompactRIO units installed within electrical panels throughout the ESIF. The solution is responsible for monitoring electrical conditioning components between the ESIF’s power sources (120V, 240V, 480V, and 600V AC plus 500V and 1,000V DC on 250A and 1,600A busses, with 2,500A in the future) and the laboratory power connections. As a result, any powered device under test or equipment used for testing in the lab was actively monitored by CompactRIO, both from a power consumption and analysis standpoint, as well as for safety monitoring. Voltage transformers bring voltage levels into a range compatible with the NI C Series devices and protect equipment from excess voltage.&lt;/p&gt;

&lt;p&gt;The team considered using traditional PLCs during preliminary phases of the project; however, it became apparent that the system performance requirements, including the high sample rate and real-time processing, would be too much for this traditional form of hardware. Instead, we selected the NI system design platform, including CompactRIO hardware and LabVIEW software because of the flexibility and deterministic timing capabilities of CompactRIO and the diverse offering of high-performance I/O modules.&lt;/p&gt;

&lt;p&gt;The solution used systems based on the NI cRIO-9024 embedded real-time controller with the NI cRIO-9118 backplane and the NI cRIO-9082 controller for this project. The analog input cards used were 9215 modules. To monitor, analyze, alarm, and communicate, the CompactRIO devices were programmed using the LabVIEW Real-Time and LabVIEW FPGA (field-programmable gate array) development modules. This allowed the system to deterministically perform each of these functions in parallel threads. With data being acquired at 51.2KS/s and 100KS/s, I derived a solution from the CompactRIO Waveform Reference Library to efficiently transfer high-speed data from the FPGA (for acquisition) to the real-time application for communications and action processing.&lt;/p&gt;

&lt;p&gt;Several components of this NI-based solution were critical to the project’s success. First, the LabVIEW FPGA Module made it possible to implement a system responsible for identifying unsafe electrical conditions and reporting these conditions back to the control systems. Second, simultaneously sampling data across input channels using the NI 9215 analog input module, combined with the accuracy of the NI 9467 GPS module, made timing synchronization between all 72 CompactRIO devices accurate within 100 ns. This was especially beneficial when correlating data from multiple laboratories across the entire 183,000 square foot facility, where testing areas are separated and monitored by different CompactRIO devices. Third, with the processing power of the CompactRIO real-time controllers (800MHz and 1.33GHz for the 9024 and 9118 respectively), the controllers acquired and processed 28 channels of data each at 51,200Hz while managing other functions, such as alarm monitoring and TCP/IP and Modbus communications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/NREL_powerbus.jpg&quot; alt=&quot;REDB Hardware&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The REDB for DC testing at the new ESIF, which includes CompactRIO hardware is pictured.
&lt;em&gt;Image: &lt;a href=&quot;https://nrel.gov&quot;&gt;NREL&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/NREL_REDB_AC.jpg&quot; alt=&quot;REDB AC Hardware&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The REDB for AC testing.
&lt;em&gt;Image: &lt;a href=&quot;https://www.nrel.gov/grid/assets/pdfs/second_grid_sim_shirazi.pdf&quot;&gt;NREL&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I ended up developing and compiling more than seven custom FPGA bitfiles for this project. The individual compile time for each FPGA application averaged 1.5 hours. Furthermore, prior to releasing final versions of the FGPA applications, several preliminary compilations were necessary to account for project scope changes and shifting requirements, as with most consulting projects. To counter this, I leveraged the LabVIEW FPGA Compile Cloud Service to compile the FPGA applications, which saved valuable developer time on the project. With the LabVIEW FPGA Compile Cloud Service, I was able to push multiple FPGA builds to an external server managed by NI, compile code in parallel, free up developer machines for other tasks, and drastically shorten compile times (2.6 to 5.3 times shorter).&lt;/p&gt;

&lt;p&gt;With each of the bitfiles compiled, each and every cRIO of the same family could be reconfigured on the fly to load in different functionality and dynamically adjust to NREL’s research needs.&lt;/p&gt;

&lt;h3 id=&quot;solution-benefits&quot;&gt;Solution Benefits&lt;/h3&gt;

&lt;p&gt;Overall, the solution delivered the following benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;High-speed data acquisition, which provides a more accurate representation of the effects individual experiments may have on the grid&lt;/li&gt;
  &lt;li&gt;Correlated data from synchronized systems distributed throughout the ESIF, enabling researchers to better understand multi-lab experiments and characterize the building’s electrical profile&lt;/li&gt;
  &lt;li&gt;Easily reconfigurable virtual power meters and CompactRIO systems that can be configured as AC or DC devices without recompiling or re-imaging the controllers&lt;/li&gt;
  &lt;li&gt;A transparent and flexible architecture for future expansion, including features to send data to third-party systems through standard communication protocols such as TCP/IP and Modbus&lt;/li&gt;
  &lt;li&gt;Safe emergency-stop monitoring, implemented in dedicated FPGA code&lt;/li&gt;
  &lt;li&gt;Dynamically configurable analysis algorithms (virtual metering objects), enabled by the deterministic real-time processing capability of CompactRIO hardware for analyzing electrical characteristics for safety violations and in simulating complex circuit breaker logic&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;project-conclusions&quot;&gt;Project Conclusions&lt;/h3&gt;

&lt;p&gt;Using CompactRIO and LabVIEW, I quickly developed a prototype and responded to customer questions and expectations for a distributed power monitoring solution. Changes in scope and requirements as a result of discoveries made mid-project had minimal effect on the schedule because of the shortened development time achieved using the graphical system design approach.&lt;/p&gt;

&lt;p&gt;With the CompactRIO platform and the LabVIEW Real-Time Module, I created the most efficient real-time system possible, which performed considerably more processing on the distributed controllers when compared to traditional PLCs.&lt;/p&gt;

&lt;p&gt;By using a complete top-to-bottom NI solution, I aggressively executed the project, leading to a solution for NREL that was ahead of schedule and delivered under budget.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;p&gt;The original paper was published here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalengineering247.com/article/creating-high-speed-electrical-analysis-for-energy-research/&quot;&gt;https://www.digitalengineering247.com/article/creating-high-speed-electrical-analysis-for-energy-research/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further technical reading:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nrel.gov/grid/assets/pdfs/second_grid_sim_shirazi.pdf&quot;&gt;https://www.nrel.gov/grid/assets/pdfs/second_grid_sim_shirazi.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nrel.gov/grid/assets/pdfs/gridsim-d111-nrel-esif-and-phil.pdf&quot;&gt;https://www.nrel.gov/grid/assets/pdfs/gridsim-d111-nrel-esif-and-phil.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>

			
				<category term="electrical" />
			
				<category term="power" />
			
			
				<category term="electrical" />
			
				<category term="hardware" />
			
				<category term="power" />
			
				<category term="energy" />
			
				<category term="DAQ" />
			
				<category term="FPGA" />
			
				<category term="real-time" />
			
				<category term="LabVIEW" />
			
				<category term="NI" />
			

			<published>2023-07-01T23:55:01-06:00</published>
		</entry>
	
		<entry>
			<id>https://nickaroneseno.com/software/web/how-I-built-it/</id>
			<title>How I Built It</title>
			<link href="https://nickaroneseno.com/software/web/how-I-built-it/" rel="alternate" type="text/html" title="How I Built It" />
			<updated>2023-06-29T16:03:15-06:00</updated>

			
				
				<author>
					
						<name>Nick</name>
					
					
					
						<uri>https://nickaroneseno.com/</uri>
					
				</author>
			
			<summary>In which I go off the &apos;Rails&apos;</summary>
			<content type="html" xml:base="https://nickaroneseno.com/software/web/how-I-built-it/">&lt;h1 id=&quot;welcome&quot;&gt;Welcome!&lt;/h1&gt;
&lt;p&gt;After recently being inspired to finally do something with the horde of domains I’m sitting on, today I’m going to lay out how exactly I was able to get my personal portfolio up and running with Cloudflare and Github Pages.&lt;/p&gt;

&lt;p&gt;This guide is for Windows.&lt;/p&gt;

&lt;div class=&quot;panel radius&quot;&gt;
  &lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#welcome&quot; id=&quot;markdown-toc-welcome&quot;&gt;Welcome!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#goals&quot; id=&quot;markdown-toc-goals&quot;&gt;Goals:&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#requirements&quot; id=&quot;markdown-toc-requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ruby&quot; id=&quot;markdown-toc-ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bundler&quot; id=&quot;markdown-toc-bundler&quot;&gt;Bundler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#git&quot; id=&quot;markdown-toc-git&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll&quot; id=&quot;markdown-toc-jekyll&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#build-it&quot; id=&quot;markdown-toc-build-it&quot;&gt;Build it!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#push-it-push-it-real-good&quot; id=&quot;markdown-toc-push-it-push-it-real-good&quot;&gt;Push it. Push it real good.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot; id=&quot;markdown-toc-references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h1 id=&quot;goals&quot;&gt;Goals:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;To be able to have a place to remember how I did &lt;em&gt;that one thing&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;To be able to showcase anything (marginally) cool I built&lt;/li&gt;
  &lt;li&gt;To be able to use markdown as a means for creating content (HTML is just &lt;em&gt;so 90s&lt;/em&gt;, man)&lt;/li&gt;
  &lt;li&gt;To spend as little as possible (having monkeying with websites for 20+ years, I’m over dealing with hosting providers [for now])&lt;/li&gt;
  &lt;li&gt;To have more control over the content, formatting, and layout without installing bloat or increase attack surface&lt;/li&gt;
  &lt;li&gt;To feel smug about having a domain that has my name&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;
&lt;p&gt;For this effort, I’m using a domain name and Github pages. This is optional; you can just use the URL provided by Github directly.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Github account&lt;/li&gt;
  &lt;li&gt;Computing device&lt;/li&gt;
  &lt;li&gt;Base understanding of Git (here’s a &lt;a href=&quot;https://alanhohn.com/extras/conversational-git/&quot;&gt;refresher&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Some time and/or coffee&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ruby&quot;&gt;Ruby&lt;/h1&gt;
&lt;p&gt;Download and install &lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot;&gt;ruby&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When it’s done installing, make sure to check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ridk&lt;/code&gt; box.
&lt;img src=&quot;/assets/images/guides/ruby_install.jpg&quot; alt=&quot;RubyInstall&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This opens a new prompt. Enter in options &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1,3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/guides/ruby_install2.jpg&quot; alt=&quot;RubyInstall2&quot; height=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, open a new command prompt window from Start, and type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ridk enable&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;bundler&quot;&gt;Bundler&lt;/h1&gt;
&lt;p&gt;Open a &lt;em&gt;Powershell&lt;/em&gt; window. Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt;. This is successful if you see the “1 gem installed” message&lt;/p&gt;

&lt;h1 id=&quot;git&quot;&gt;Git&lt;/h1&gt;
&lt;p&gt;If you don’t already have it installed, install &lt;a href=&quot;https://gitforwindows.org/&quot;&gt;Git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also create a new repository on GitHub on your account. Once created, go to that repo and click on Settings (1), then Pages on the left (2). Here, you need to select which branch you want to auto-build from (3) with an optional embedded directory. In mine, that’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt;. Optionally, type in your domain name (4).
&lt;img src=&quot;/assets/images/guides/github_pages.jpg&quot; alt=&quot;GitHubPages&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are, using your DNS provider, enure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www&lt;/code&gt; is pointing to your domain apex (@). Then, create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; record to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;USER&amp;gt;.github.io&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;USER&amp;gt;&lt;/code&gt; is your github username. Give it up to an hour to propagate, then come back and check the settings to ensure it linked correctly.&lt;/p&gt;

&lt;h1 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h1&gt;
&lt;p&gt;Open a new command prompt window from Start, and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll bundler&lt;/code&gt;. When it’s done, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll -v&lt;/code&gt; to verify it was installed properly (you’ll see a version).
&lt;img src=&quot;/assets/images/guides/jekyll.jpg&quot; alt=&quot;jekyllv&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;build-it&quot;&gt;Build it!&lt;/h1&gt;
&lt;p&gt;We’ll need a place to store our site, so go choose one now. Create an empty folder there - that will be what everything (the site, git repo, assets, etc) is stored in. From here on out, we’ll be using Git Bash to do our command line kung-fu, so open that.&lt;/p&gt;

&lt;p&gt;In Git Bash type,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git init REPO
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;REPO
git checkout &lt;span class=&quot;nt&quot;&gt;--orphan&lt;/span&gt; BRANCH&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REPO&lt;/code&gt; is your remote repository name and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BRANCH&lt;/code&gt; is your build branch from earlier.&lt;/p&gt;

&lt;p&gt;Now, let’s make your Jekyll site. This will create the new instantiation of Jekyll in our previously navigated to directory (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;). The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--force&lt;/code&gt; flag ignores and Readme.md or other files created by GitHub. Optionally, delete everything here before running the next command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;jekyll new &lt;span class=&quot;nt&quot;&gt;--skip-bundle&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Navigate to where you made the site in Windows Explorer. Open the Gemfile that Jekyll made. Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; to the beginning of the line that starts with gem &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; to comment out this line. Now, add the github-pages gem by editing the line starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;# gem &quot;github-pages&quot;&lt;/code&gt;. Change this line to:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;gem &lt;span class=&quot;s2&quot;&gt;&quot;github-pages&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; GITHUB-PAGES-VERSION&quot;&lt;/span&gt;, group: :jekyll_plugins&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Replace GITHUB-PAGES-VERSION with the latest supported version of the github-pages gem (e.g., 228). Check the version &lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;here&lt;/a&gt;. Save and close.&lt;/p&gt;

&lt;p&gt;Going back to the Bash window, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;. When we deploy, a different version (most likely) of Jekyll will be installed as a dependency of the github-pages gem that is compatible with GitHub so it can auto-build.&lt;/p&gt;

&lt;p&gt;Assuming everything has gone right, you’re ready to test your site locally by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;! It can be found at &lt;a href=&quot;http://localhost:4000/&quot;&gt;http://localhost:4000/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;push-it-push-it-real-good&quot;&gt;Push it. Push it real good.&lt;/h1&gt;
&lt;p&gt;Once you’re happy with the content, don’t forget to add, commit and push your files to the cloud. If you’re not committing to your build branch (please don’t), make a pull request and let GitHub handle the rest!&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;p&gt;The info for this post was concatenated from the following sources:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll&quot;&gt;https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/testing-your-github-pages-site-locally-with-jekyll&quot;&gt;https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/testing-your-github-pages-site-locally-with-jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/configuration/default/&quot;&gt;https://jekyllrb.com/docs/configuration/default/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/how-to-install-ruby-bundler-on-windows/#&quot;&gt;https://www.geeksforgeeks.org/how-to-install-ruby-bundler-on-windows/#&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/installation/windows/&quot;&gt;https://jekyllrb.com/docs/installation/windows/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

</content>

			
				<category term="software" />
			
				<category term="web" />
			
			
				<category term="web" />
			
				<category term="software" />
			
				<category term="jekyll" />
			
				<category term="DNS" />
			
				<category term="guides" />
			
				<category term="windows" />
			

			<published>2023-06-29T16:03:15-06:00</published>
		</entry>
	
</feed>